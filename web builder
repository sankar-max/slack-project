'use client'

import React, { useState, useRef, useEffect } from 'react'
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Slider } from "@/components/ui/slider"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Move, ArrowDownRight, Smartphone, Tablet, Laptop } from 'lucide-react'

interface Element {
  id: string
  type: 'heading' | 'paragraph' | 'button'
  content: string
  style: {
    mobile: React.CSSProperties
    tablet: React.CSSProperties
    desktop: React.CSSProperties
  }
  events: {
    onClick?: string
    onHover?: string
  }
}

type DeviceType = 'mobile' | 'tablet' | 'desktop'

export default function EnhancedResponsiveWebflowLikeApp() {
  const [elements, setElements] = useState<Element[]>([])
  const [selectedElement, setSelectedElement] = useState<Element | null>(null)
  const [generatedHTML, setGeneratedHTML] = useState<string>('')
  const [currentDevice, setCurrentDevice] = useState<DeviceType>('desktop')
  const canvasRef = useRef<HTMLDivElement>(null)

  const addElement = (type: 'heading' | 'paragraph' | 'button') => {
    const newElement: Element = {
      id: `element-${elements.length + 1}`,
      type,
      content: `New ${type}`,
      style: {
        mobile: { fontSize: '14px', color: '#000000', width: '100%', height: 'auto', padding: '8px', position: 'relative', left: '0px', top: '0px' },
        tablet: { fontSize: '16px', color: '#000000', width: '100%', height: 'auto', padding: '8px', position: 'relative', left: '0px', top: '0px' },
        desktop: { fontSize: '18px', color: '#000000', width: '100%', height: 'auto', padding: '8px', position: 'relative', left: '0px', top: '0px' },
      },
      events: {}
    }
    setElements([...elements, newElement])
  }

  const onDragEnd = (result: any) => {
    if (!result.destination) return
    const items = Array.from(elements)
    const [reorderedItem] = items.splice(result.source.index, 1)
    items.splice(result.destination.index, 0, reorderedItem)
    setElements(items)
  }

  const updateElementContent = (content: string) => {
    if (!selectedElement) return
    const updatedElements = elements.map(el =>
      el.id === selectedElement.id ? { ...el, content } : el
    )
    setElements(updatedElements)
    setSelectedElement({ ...selectedElement, content })
  }

  const updateElementStyle = (property: string, value: string | number) => {
    if (!selectedElement) return
    const updatedStyle = {
      ...selectedElement.style,
      [currentDevice]: {
        ...selectedElement.style[currentDevice],
        [property]: value
      }
    }
    const updatedElements = elements.map(el =>
      el.id === selectedElement.id ? { ...el, style: updatedStyle } : el
    )
    setElements(updatedElements)
    setSelectedElement({ ...selectedElement, style: updatedStyle })
  }

  const updateElementEvent = (eventType: 'onClick' | 'onHover', value: string) => {
    if (!selectedElement) return
    const updatedEvents = { 
      ...selectedElement.events, 
      [eventType]: value === 'none' ? undefined : value 
    }
    const updatedElements = elements.map(el =>
      el.id === selectedElement.id ? { ...el, events: updatedEvents } : el
    )
    setElements(updatedElements)
    setSelectedElement({ ...selectedElement, events: updatedEvents })
  }

  const generateHTML = () => {
    const html = elements.map(el => {
      const mobileStyle = Object.entries(el.style.mobile).map(([key, value]) => `${key}: ${value};`).join(' ')
      const tabletStyle = Object.entries(el.style.tablet).map(([key, value]) => `${key}: ${value};`).join(' ')
      const desktopStyle = Object.entries(el.style.desktop).map(([key, value]) => `${key}: ${value};`).join(' ')
      const events = Object.entries(el.events).map(([key, value]) => `${key.toLowerCase()}="${value}"`).join(' ')
      
      const responsiveStyle = `
        @media (max-width: 640px) { ${mobileStyle} }
        @media (min-width: 641px) and (max-width: 1024px) { ${tabletStyle} }
        @media (min-width: 1025px) { ${desktopStyle} }
      `
      
      switch (el.type) {
        case 'heading':
          return `<h1 style="${responsiveStyle}" ${events}>${el.content}</h1>`
        case 'paragraph':
          return `<p style="${responsiveStyle}" ${events}>${el.content}</p>`
        case 'button':
          return `<button style="${responsiveStyle}" ${events}>${el.content}</button>`
        default:
          return ''
      }
    }).join('\n')
    setGeneratedHTML(html)
  }

  const handleResize = (e: React.MouseEvent, direction: 'right' | 'bottom' | 'corner') => {
    if (!selectedElement || !canvasRef.current) return
    e.preventDefault()
    
    const startX = e.clientX
    const startY = e.clientY
    const startWidth = parseInt(selectedElement.style[currentDevice].width as string)
    const startHeight = parseInt(selectedElement.style[currentDevice].height as string) || 0
    
    const handleMouseMove = (e: MouseEvent) => {
      const deltaX = e.clientX - startX
      const deltaY = e.clientY - startY
      
      if (direction === 'right' || direction === 'corner') {
        let newWidth = startWidth + deltaX
        newWidth = Math.max(50, Math.min(newWidth, canvasRef.current!.offsetWidth))
        updateElementStyle('width', `${newWidth}px`)
      }
      
      if (direction === 'bottom' || direction === 'corner') {
        let newHeight = startHeight + deltaY
        newHeight = Math.max(20, newHeight)
        updateElementStyle('height', `${newHeight}px`)
      }
    }
    
    const handleMouseUp = () => {
      document.removeEventListener('mousemove', handleMouseMove)
      document.removeEventListener('mouseup', handleMouseUp)
    }
    
    document.addEventListener('mousemove', handleMouseMove)
    document.addEventListener('mouseup', handleMouseUp)
  }

  const handleMove = (e: React.MouseEvent) => {
    if (!selectedElement || !canvasRef.current) return
    e.preventDefault()
    
    const startX = e.clientX
    const startY = e.clientY
    const startLeft = parseInt(selectedElement.style[currentDevice].left as string) || 0
    const startTop = parseInt(selectedElement.style[currentDevice].top as string) || 0
    
    const handleMouseMove = (e: MouseEvent) => {
      const deltaX = e.clientX - startX
      const deltaY = e.clientY - startY
      
      let newLeft = startLeft + deltaX
      let newTop = startTop + deltaY
      
      updateElementStyle('left', `${newLeft}px`)
      updateElementStyle('top', `${newTop}px`)
    }
    
    const handleMouseUp = () => {
      document.removeEventListener('mousemove', handleMouseMove)
      document.removeEventListener('mouseup', handleMouseUp)
    }
    
    document.addEventListener('mousemove', handleMouseMove)
    document.addEventListener('mouseup', handleMouseUp)
  }

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Delete' && selectedElement) {
        setElements(elements.filter(el => el.id !== selectedElement.id))
        setSelectedElement(null)
      }
    }
    document.addEventListener('keydown', handleKeyDown)
    return () => document.removeEventListener('keydown', handleKeyDown)
  }, [elements, selectedElement])

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Enhanced Responsive Webflow-like App</h1>
      <div className="flex mb-4 space-x-2">
        <Button onClick={() => addElement('heading')}>Add Heading</Button>
        <Button onClick={() => addElement('paragraph')}>Add Paragraph</Button>
        <Button onClick={() => addElement('button')}>Add Button</Button>
      </div>
      <Tabs value={currentDevice} onValueChange={(value: string) => setCurrentDevice(value as DeviceType)}>
        <TabsList>
          <TabsTrigger value="mobile"><Smartphone className="mr-2" />Mobile</TabsTrigger>
          <TabsTrigger value="tablet"><Tablet className="mr-2" />Tablet</TabsTrigger>
          <TabsTrigger value="desktop"><Laptop className="mr-2" />Desktop</TabsTrigger>
        </TabsList>
      </Tabs>
      <div className="flex mt-4">
        <div className={`pr-4 ${currentDevice === 'mobile' ? 'w-1/3' : currentDevice === 'tablet' ? 'w-1/2' : 'w-2/3'}`}>
          <h2 className="text-xl font-semibold mb-2">Canvas</h2>
          <DragDropContext onDragEnd={onDragEnd}>
            <Droppable droppableId="canvas">
              {(provided) => (
                <div
                  {...provided.droppableProps}
                  ref={(el) => {
                    provided.innerRef(el)
                    if (canvasRef) canvasRef.current = el
                  }}
                  className={`min-h-[500px] border p-4 bg-gray-50 ${
                    currentDevice === 'mobile' ? 'w-[320px]' : 
                    currentDevice === 'tablet' ? 'w-[768px]' : 
                    'w-full'
                  }`}
                  style={{ overflow: 'hidden', position: 'relative' }}
                >
                  {elements.map((element, index) => (
                    <Draggable key={element.id} draggableId={element.id} index={index}>
                      {(provided) => (
                        <div
                          ref={provided.innerRef}
                          {...provided.draggableProps}
                          className={`absolute ${selectedElement?.id === element.id ? 'ring-2 ring-blue-500' : ''}`}
                          onClick={() => setSelectedElement(element)}
                          style={{
                            ...element.style[currentDevice],
                            ...provided.draggableProps.style,
                          }}
                        >
                          <div {...provided.dragHandleProps} className="absolute top-0 left-0 p-1 cursor-move" onMouseDown={handleMove}>
                            <Move size={16} />
                          </div>
                          {element.type === 'heading' && <h1>{element.content}</h1>}
                          {element.type === 'paragraph' && <p>{element.content}</p>}
                          {element.type === 'button' && (
                            <button className="px-2 py-1 bg-blue-500 text-white rounded">
                              {element.content}
                            </button>
                          )}
                          {selectedElement?.id === element.id && (
                            <>
                              <div
                                className="absolute top-0 right-0 w-1 h-full cursor-ew-resize bg-blue-500 opacity-50"
                                onMouseDown={(e) => handleResize(e, 'right')}
                              />
                              <div
                                className="absolute bottom-0 left-0 w-full h-1 cursor-ns-resize bg-blue-500 opacity-50"
                                onMouseDown={(e) => handleResize(e, 'bottom')}
                              />
                              <div
                                className="absolute bottom-0 right-0 w-4 h-4 cursor-nwse-resize bg-blue-500 opacity-50"
                                onMouseDown={(e) => handleResize(e, 'corner')}
                              >
                                <ArrowDownRight size={16} />
                              </div>
                            </>
                          )}
                        </div>
                      )}
                    </Draggable>
                  ))}
                  {provided.placeholder}
                </div>
              )}
            </Droppable>
          </DragDropContext>
        </div>
        <div className={`pl-4 ${currentDevice === 'mobile' ? 'w-2/3' : currentDevice === 'tablet' ? 'w-1/2' : 'w-1/3'}`}>
          <h2 className="text-xl font-semibold mb-2">Properties</h2>
          {selectedElement && (
            <div className="space-y-4">
              <div>
                <Label htmlFor="content">Content</Label>
                <Input
                  id="content"
                  value={selectedElement.content}
                  onChange={(e) => updateElementContent(e.target.value)}
                />
              </div>
              <div>
                <Label htmlFor="font-size">Font Size</Label>
                <div className="flex items-center space-x-2">
                  <Slider
                    id="font-size"
                    min={8}
                    max={72}
                    step={1}
                    value={[parseInt(selectedElement.style[currentDevice].fontSize as string)]}
                    onValueChange={(value) => updateElementStyle('fontSize', `${value[0]}px`)}
                  />
                  <span>{selectedElement.style[currentDevice].fontSize}</span>
                </div>
              </div>
              <div>
                <Label htmlFor="color">Color</Label>
                <div className="flex items-center space-x-2">
                  <Input
                    id="color"
                    type="color"
                    value={selectedElement.style[currentDevice].color as string}
                    onChange={(e) => updateElementStyle('color', e.target.value)}
                    className="w-12 h-12 p-1 rounded"
                  />
                
                  <span>{selectedElement.style[currentDevice].color as string}</span>
                </div>
              </div>
              <div>
                <Label htmlFor="width">Width</Label>
                <Input
                  id="width"
                  type="text"
                  value={selectedElement.style[currentDevice].width}
                  onChange={(e) => updateElementStyle('width', e.target.value)}
                />
              </div>
              <div>
                <Label htmlFor="height">Height</Label>
                <Input
                  id="height"
                  type="text"
                  value={selectedElement.style[currentDevice].height || 'auto'}
                  onChange={(e) => updateElementStyle('height', e.target.value)}
                />
              </div>
              <div>
                <Label htmlFor="left">Left Position</Label>
                <Input
                  id="left"
                  type="text"
                  value={selectedElement.style[currentDevice].left}
                  onChange={(e) => updateElementStyle('left', e.target.value)}
                />
              </div>
              <div>
                <Label htmlFor="top">Top Position</Label>
                <Input
                  id="top"
                  type="text"
                  value={selectedElement.style[currentDevice].top}
                  onChange={(e) => updateElementStyle('top', e.target.value)}
                />
              </div>
              <div>
                <Label htmlFor="onClick">On Click Event</Label>
                <Select onValueChange={(value) => updateElementEvent('onClick', value)} value={selectedElement.events.onClick || 'none'}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select event" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="none">None</SelectItem>
                    <SelectItem value="alert('Clicked!')">Show Alert</SelectItem>
                    <SelectItem value="console.log('Clicked')">Log to Console</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="onHover">On Hover Event</Label>
                <Select onValueChange={(value) => updateElementEvent('onHover', value)} value={selectedElement.events.onHover || 'none'}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select event" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="none">None</SelectItem>
                    <SelectItem value="this.style.opacity='0.8'">Reduce Opacity</SelectItem>
                    <SelectItem value="this.style.transform='scale(1.1)'">Scale Up</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          )}
          <Button onClick={generateHTML} className="mt-4">Generate HTML</Button>
          {generatedHTML && (
            <div className="mt-4">
              <Label htmlFor="generated-html">Generated HTML</Label>
              <Textarea
                id="generated-html"
                value={generatedHTML}
                readOnly
                className="h-[200px]"
              />
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
